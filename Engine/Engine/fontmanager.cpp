////////////////////////////////////////////////////////////////////////////////
// Filename: fontmanager.cpp
////////////////////////////////////////////////////////////////////////////////
#include "fontmanager.h"


void Fonts::LoadFontBitmap(const char* p_texfilename, const char* p_datfilename)
{
	TextureClass tex(m_device, p_texfilename);
	m_textures[0] = tex.GetTexture();

	std::vector<Character> characters_Arial({ { ' ', 396, 264, 18, 18, 9, 9 },
		{ '!', 361, 82, 26, 62, 4, 52 },
		{ '"', 153, 264, 35, 35, 4, 53 },
		{ '#', 533, 145, 46, 60, 7, 51 },
		{ '$', 192, 0, 43, 73, 6, 57 },
		{ '%', 40, 82, 67, 62, 7, 52 },
		{ '&', 107, 82, 54, 62, 7, 52 },
		{ '\'', 188, 264, 24, 35, 4, 53 },
		{ '(', 54, 0, 30, 76, 4, 56 },
		{ ')', 84, 0, 30, 76, 7, 56 },
		{ '*', 42, 264, 37, 37, 5, 55 },
		{ '+', 773, 205, 46, 47, 7, 45 },
		{ ',', 125, 264, 28, 36, 6, 16 },
		{ '-', 314, 264, 33, 23, 6, 27 },
		{ '.', 288, 264, 26, 26, 5, 16 },
		{ '/', 114, 0, 39, 74, 8, 54 },
		{ '0', 551, 82, 44, 61, 6, 51 },
		{ '1', 45, 205, 41, 59, 4, 50 },
		{ '2', 625, 145, 45, 60, 7, 51 },
		{ '3', 461, 82, 45, 61, 7, 51 },
		{ '4', 866, 145, 47, 59, 8, 50 },
		{ '5', 670, 145, 45, 60, 7, 50 },
		{ '6', 595, 82, 44, 61, 6, 51 },
		{ '7', 0, 205, 45, 59, 6, 50 },
		{ '8', 506, 82, 45, 61, 6, 51 },
		{ '9', 639, 82, 44, 61, 6, 51 },
		{ ':', 747, 205, 26, 49, 5, 39 },
		{ ';', 123, 205, 28, 59, 6, 39 },
		{ '<', 865, 205, 46, 43, 7, 43 },
		{ '=', 79, 264, 46, 36, 7, 39 },
		{ '>', 819, 205, 46, 44, 7, 43 },
		{ '?', 0, 82, 40, 63, 6, 53 },
		{ '@', 416, 0, 66, 69, 6, 50 },
		{ 'A', 789, 82, 53, 60, 9, 51 },
		{ 'B', 247, 145, 48, 60, 3, 51 },
		{ 'C', 265, 82, 49, 62, 6, 52 },
		{ 'D', 51, 145, 49, 60, 3, 51 },
		{ 'E', 715, 145, 43, 60, 3, 51 },
		{ 'F', 758, 145, 42, 60, 3, 51 },
		{ 'G', 215, 82, 50, 62, 6, 52 },
		{ 'H', 295, 145, 48, 60, 3, 51 },
		{ 'I', 842, 145, 24, 60, 3, 51 },
		{ 'J', 683, 82, 41, 61, 7, 51 },
		{ 'K', 100, 145, 49, 60, 3, 51 },
		{ 'L', 800, 145, 42, 60, 3, 51 },
		{ 'M', 842, 82, 53, 60, 3, 51 },
		{ 'N', 343, 145, 48, 60, 3, 51 },
		{ 'O', 161, 82, 54, 62, 6, 52 },
		{ 'P', 579, 145, 46, 60, 3, 51 },
		{ 'Q', 361, 0, 55, 72, 6, 52 },
		{ 'R', 439, 145, 47, 60, 3, 51 },
		{ 'S', 314, 82, 47, 62, 6, 52 },
		{ 'T', 149, 145, 49, 60, 7, 51 },
		{ 'U', 413, 82, 48, 61, 3, 51 },
		{ 'V', 0, 145, 51, 60, 9, 51 },
		{ 'W', 724, 82, 65, 60, 7, 51 },
		{ 'X', 198, 145, 49, 60, 8, 51 },
		{ 'Y', 391, 145, 48, 60, 9, 51 },
		{ 'Z', 486, 145, 47, 60, 6, 51 },
		{ '[', 332, 0, 29, 73, 3, 54 },
		{ '\\', 153, 0, 39, 74, 8, 54 },
		{ ']', 302, 0, 30, 73, 7, 54 },
		{ '^', 0, 264, 42, 43, 5, 52 },
		{ '_', 347, 264, 49, 22, 8, 4 },
		{ '`', 212, 264, 31, 31, 1, 59 },
		{ 'a', 243, 205, 43, 51, 6, 41 },
		{ 'b', 482, 0, 45, 65, 4, 55 },
		{ 'c', 286, 205, 43, 51, 6, 41 },
		{ 'd', 527, 0, 45, 65, 6, 55 },
		{ 'e', 198, 205, 45, 51, 6, 41 },
		{ 'f', 572, 0, 37, 65, 7, 55 },
		{ 'g', 636, 0, 47, 64, 6, 41 },
		{ 'h', 727, 0, 43, 64, 4, 55 },
		{ 'i', 387, 82, 26, 62, 5, 53 },
		{ 'j', 22, 0, 32, 76, 11, 53 },
		{ 'k', 683, 0, 44, 64, 4, 55 },
		{ 'l', 609, 0, 27, 65, 4, 55 },
		{ 'm', 370, 205, 61, 50, 4, 41 },
		{ 'n', 431, 205, 43, 50, 4, 41 },
		{ 'o', 151, 205, 47, 51, 6, 41 },
		{ 'p', 817, 0, 45, 63, 4, 41 },
		{ 'q', 862, 0, 45, 63, 6, 41 },
		{ 'r', 517, 205, 35, 50, 4, 41 },
		{ 's', 329, 205, 41, 51, 7, 41 },
		{ 't', 86, 205, 37, 59, 7, 49 },
		{ 'u', 474, 205, 43, 50, 4, 40 },
		{ 'v', 613, 205, 47, 49, 8, 40 },
		{ 'w', 552, 205, 61, 49, 7, 40 },
		{ 'x', 660, 205, 45, 49, 8, 40 },
		{ 'y', 770, 0, 47, 63, 8, 40 },
		{ 'z', 705, 205, 42, 49, 7, 40 },
		{ '{', 269, 0, 33, 73, 7, 54 },
		{ '|', 0, 0, 22, 82, 3, 57 },
		{ '}', 235, 0, 34, 73, 7, 54 },
		{ '~', 243, 264, 45, 28, 7, 35 },
	});

	m_font_Arial = { "Source Sans Pro", 64, 0, 0, 913, 307, 95, characters_Arial };
}


void Fonts::LoadFontBitmap2(const char* p_texfilename)
{
	TextureClass tex(m_device, p_texfilename);
	m_textures[1] = tex.GetTexture();

	std::vector<Character> characters_Consolas({
		{ ' ', 522, 263, 18, 18, 9, 9 },
		{ '!', 169, 82, 27, 63, -4, 53 },
		{ '"', 259, 263, 37, 33, 1, 53 },
		{ '#', 158, 145, 51, 59, 8, 50 },
		{ '$', 338, 0, 46, 72, 6, 56 },
		{ '%', 526, 0, 52, 63, 8, 54 },
		{ '&', 196, 82, 52, 62, 7, 52 },
		{ '\'', 296, 263, 25, 33, -5, 53 },
		{ '(', 23, 0, 36, 78, 0, 55 },
		{ ')', 59, 0, 36, 78, 1, 55 },
		{ '*', 91, 263, 43, 45, 4, 53 },
		{ '+', 0, 263, 48, 49, 6, 41 },
		{ ',', 134, 263, 34, 39, 2, 19 },
		{ '-', 432, 263, 37, 24, 1, 29 },
		{ '.', 370, 263, 29, 29, -3, 19 },
		{ '/', 436, 0, 45, 69, 5, 53 },
		{ '0', 380, 82, 48, 60, 6, 50 },
		{ '1', 781, 145, 45, 59, 5, 50 },
		{ '2', 826, 145, 45, 59, 4, 50 },
		{ '3', 755, 82, 44, 60, 4, 50 },
		{ '4', 209, 145, 51, 59, 8, 50 },
		{ '5', 799, 82, 43, 60, 3, 50 },
		{ '6', 617, 82, 46, 60, 5, 50 },
		{ '7', 551, 145, 46, 59, 5, 50 },
		{ '8', 663, 82, 46, 60, 5, 50 },
		{ '9', 597, 145, 46, 59, 6, 50 },
		{ ':', 517, 204, 28, 51, -4, 41 },
		{ ';', 297, 82, 33, 61, 1, 41 },
		{ '<', 252, 204, 43, 53, 5, 43 },
		{ '=', 214, 263, 45, 34, 5, 34 },
		{ '>', 295, 204, 42, 53, 2, 43 },
		{ '?', 131, 82, 38, 63, 0, 53 },
		{ '@', 95, 0, 53, 76, 9, 54 },
		{ 'A', 842, 82, 53, 59, 9, 50 },
		{ 'B', 871, 145, 45, 59, 4, 50 },
		{ 'C', 476, 82, 47, 60, 6, 50 },
		{ 'D', 361, 145, 48, 59, 6, 50 },
		{ 'E', 130, 204, 41, 59, 3, 50 },
		{ 'F', 171, 204, 41, 59, 3, 50 },
		{ 'G', 428, 82, 48, 60, 7, 50 },
		{ 'H', 457, 145, 47, 59, 6, 50 },
		{ 'I', 45, 204, 43, 59, 4, 50 },
		{ 'J', 212, 204, 40, 59, 3, 50 },
		{ 'K', 643, 145, 46, 59, 4, 50 },
		{ 'L', 88, 204, 42, 59, 2, 50 },
		{ 'M', 311, 145, 50, 59, 7, 50 },
		{ 'N', 689, 145, 46, 59, 5, 50 },
		{ 'O', 330, 82, 50, 60, 7, 50 },
		{ 'P', 0, 204, 45, 59, 4, 50 },
		{ 'Q', 384, 0, 52, 71, 7, 50 },
		{ 'R', 735, 145, 46, 59, 4, 50 },
		{ 'S', 709, 82, 46, 60, 6, 50 },
		{ 'T', 409, 145, 48, 59, 6, 50 },
		{ 'U', 523, 82, 47, 60, 6, 50 },
		{ 'V', 0, 145, 53, 59, 9, 50 },
		{ 'W', 260, 145, 51, 59, 8, 50 },
		{ 'X', 106, 145, 52, 59, 8, 50 },
		{ 'Y', 53, 145, 53, 59, 9, 50 },
		{ 'Z', 504, 145, 47, 59, 6, 50 },
		{ '[', 271, 0, 34, 76, -2, 54 },
		{ '\\', 481, 0, 45, 69, 4, 53 },
		{ ']', 305, 0, 33, 76, 0, 54 },
		{ '^', 168, 263, 46, 38, 5, 50 },
		{ '_', 469, 263, 53, 23, 9, 1 },
		{ '`', 399, 263, 33, 26, 3, 53 },
		{ 'a', 431, 204, 44, 51, 5, 41 },
		{ 'b', 720, 0, 45, 63, 4, 53 },
		{ 'c', 637, 204, 43, 50, 4, 41 },
		{ 'd', 765, 0, 45, 63, 6, 53 },
		{ 'e', 385, 204, 46, 51, 5, 41 },
		{ 'f', 578, 0, 48, 63, 6, 54 },
		{ 'g', 626, 0, 48, 63, 6, 41 },
		{ 'h', 88, 82, 43, 63, 4, 53 },
		{ 'i', 0, 82, 44, 63, 4, 54 },
		{ 'j', 148, 0, 41, 76, 5, 54 },
		{ 'k', 674, 0, 46, 63, 3, 53 },
		{ 'l', 44, 82, 44, 63, 4, 53 },
		{ 'm', 545, 204, 48, 50, 6, 41 },
		{ 'n', 680, 204, 43, 50, 4, 41 },
		{ 'o', 337, 204, 48, 51, 6, 41 },
		{ 'p', 810, 0, 45, 63, 4, 41 },
		{ 'q', 855, 0, 45, 63, 6, 41 },
		{ 'r', 593, 204, 44, 50, 3, 41 },
		{ 's', 475, 204, 42, 51, 3, 41 },
		{ 't', 570, 82, 47, 60, 7, 50 },
		{ 'u', 723, 204, 43, 50, 4, 40 },
		{ 'v', 817, 204, 49, 49, 7, 40 },
		{ 'w', 766, 204, 51, 49, 8, 40 },
		{ 'x', 866, 204, 49, 49, 7, 40 },
		{ 'y', 248, 82, 49, 62, 7, 40 },
		{ 'z', 48, 263, 43, 49, 4, 40 },
		{ '{', 189, 0, 41, 76, 4, 54 },
		{ '|', 0, 0, 23, 82, -6, 60 },
		{ '}', 230, 0, 41, 76, 2, 54 },
		{ '~', 321, 263, 49, 31, 7, 33 },
	});

	m_font_Consolas = { "Consolas", 64, 0, 0, 916, 312, 95, characters_Consolas };
}


void Fonts::BuildVertexArray(void* vertices, const char* sentence, float drawX, float drawY)
{
	VertexType* vertexPtr = (VertexType*)vertices;

	// Draw each letter onto a quad.
	uint32_t index = 0;
	for (uint32_t i = 0; i < strlen(sentence); i++)
	{
		auto cr = m_font_Arial.characters[sentence[i] - 32];
		auto Scale = ui::ScaleX(0.25f), x = drawX + (cr.xoffset * Scale), y = drawY + (cr.yoffset * Scale);
		vertexPtr[index] = { { x, y, 0 },{ cr.X / m_font_Arial.width, cr.Y / m_font_Arial.height } }; // Top left.
		index++;

		vertexPtr[index] = { { x + cr.Width * Scale, y, 0 },{ cr.X / m_font_Arial.width + cr.Width / m_font_Arial.width, cr.Y / m_font_Arial.height } }; // Top right.
		index++;

		vertexPtr[index] = { { x, (y - cr.Height * Scale), 0 },{ cr.X / m_font_Arial.width, cr.Y / m_font_Arial.height + cr.Height / m_font_Arial.height } }; // Bottom left.
		index++;

		vertexPtr[index] = { { (x + cr.Width * Scale), (y - cr.Height * Scale), 0 },{ cr.X / m_font_Arial.width + cr.Width / m_font_Arial.width, cr.Y / m_font_Arial.height + cr.Height / m_font_Arial.height } }; // Bottom right.
		index++;

		drawX += cr.Width * Scale * 0.8f;
	}
}


POINT && Fonts::MeasureString(const char* sentence)
{
	POINT index = { 0, 0 };
	for (uint32_t i = 0; i < strlen(sentence); i++)
	{
		auto cr = m_font_Arial.characters[sentence[i] - 32];
		auto Scale = ui::ScaleX(0.25f);
		index.x += cr.Width * Scale * 0.6f;
		index.y = std::max(index.y, long(/*cr.Height*/82 * Scale));
	}

	return std::move(index);
}


POINT && Fonts::MeasureString2(const char* sentence)
{
	POINT index = { 0, 0 };
	for (uint32_t i = 0; i < strlen(sentence); i++)
	{
		auto cr = m_font_Consolas.characters[sentence[i] - 32];
		auto Scale = ui::ScaleX(0.25f);
		index.x += cr.Width * Scale / 1.25f;
	}

	return std::move(index);
}


void Fonts::BuildVertexArray2(void* vertices, const char* sentence, float drawX, float drawY)
{
	VertexType* vertexPtr = (VertexType*)vertices;

	// Draw each letter onto a quad.
	uint32_t index = 0;
	for (uint32_t i = 0; i < strlen(sentence); i++)
	{
		auto cr = m_font_Consolas.characters[sentence[i] - 32];
		auto Scale = ui::ScaleX(0.25f), x = drawX + (cr.xoffset * Scale), y = drawY + (cr.yoffset * Scale);
			vertexPtr[index] = { { x, y, 0 },{ cr.X / m_font_Consolas.width, cr.Y / m_font_Consolas.height } }; // Top left.
			index++;

			vertexPtr[index] = { { x + cr.Width * Scale, y, 0 },{ cr.X / m_font_Consolas.width + cr.Width / m_font_Consolas.width, cr.Y / m_font_Consolas.height } }; // Top right.
			index++;

			vertexPtr[index] = { { x, (y - cr.Height * Scale), 0 },{ cr.X / m_font_Consolas.width, cr.Y / m_font_Consolas.height + cr.Height / m_font_Consolas.height } }; // Bottom left.
			index++;

			vertexPtr[index] = { { (x + cr.Width * Scale), (y - cr.Height * Scale), 0 },{ cr.X / m_font_Consolas.width + cr.Width / m_font_Consolas.width, cr.Y / m_font_Consolas.height + cr.Height / m_font_Consolas.height } }; // Bottom right.
			index++;

		drawX += cr.Width * Scale / 1.25f;
	}
}